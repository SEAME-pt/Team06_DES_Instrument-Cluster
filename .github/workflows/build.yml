name: Build for ARM64 Raspberry Pi

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ main ]

# Add environment variables at workflow level
env:
  APP_VERSION: 1.0.${{ github.run_number }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build in Docker container
      run: |
        docker run --platform linux/arm64 --rm -v ${{ github.workspace }}:/workspace \
        -w /workspace ubuntu:24.04 /bin/bash -c '
          apt-get update && \
          apt-get install -y --no-install-recommends \
            build-essential \
            cmake \
            qt6-base-dev \
            qt6-declarative-dev \
            qt6-tools-dev \
            qt6-tools-dev-tools \
            qt6-qml-dev \
            libqt6quick6 \
            libqt6quickcontrols2-6 \
            qml6-module-qtquick \
            qml6-module-qtquick-controls \
            qml6-module-qtquick-layouts \
            qml6-module-qtqml-workerscript \
            qml6-module-qt-labs-platform \
            qml6-module-qtquick-window \
            qml6-module-qtquick-templates \
            pkg-config \
            ninja-build && \
          mkdir -p ClusterDisplay/build && \
          cd ClusterDisplay/build && \
          cmake .. -GNinja && \
          ninja
        '

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: cluster-display-arm64-${{ env.APP_VERSION }}
        path: ClusterDisplay/build/ClusterDisplay

  # Deploy job: Deploys the built artifacts to the Raspberry Pi
  deploy:
    runs-on: [self-hosted]  # Custom self-hosted runner for deployment
    needs: build  # Only run if build succeeds
    steps:
      # Prepare deployment directory
      - name: Ensure target directory exists
        run: |
          mkdir -p ./deploy/bin
          rm -rf ./deploy/bin/*

      # Download the build artifacts
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: cluster-display-arm64-${{ env.APP_VERSION }}
          path: ./deploy/bin

      # Create version file
      - name: Create version file
        run: |
          echo '${{ env.APP_VERSION }}' > ./deploy/bin/version.txt

      # Deploy the binaries to Raspberry Pi
      - name: Deploy binary to Raspberry Pi
        run: |
          sshpass -p "${{ secrets.RASP_PASSWORD }}" \
          scp -r ./deploy/bin \
          team06@100.93.193.159:/home/team06/

      # Set executable permissions on deployed files
      - name: Set executable permissions
        run: |
          sshpass -p "${{ secrets.RASP_PASSWORD }}" \
          ssh team06@100.93.193.159 'chmod +x /home/team06/bin/*'

      # Record deployment in history log
      - name: Create deployment record
        run: |
          sshpass -p "${{ secrets.RASP_PASSWORD }}" \
          ssh team06@100.93.193.159 "echo 'Deployed version ${{ env.APP_VERSION }} on $(date)' >> /home/team06/deployment-history.log"

      # Verify successful deployment
      - name: Verify deployment
        run: |
          sshpass -p "${{ secrets.RASP_PASSWORD }}" \
          ssh team06@100.93.193.159 'test -f /home/team06/bin/version.txt'

      # Notify on successful deployment
      - name: Notify deployment status
        if: ${{ success() }}
        run: echo "::notice::Successfully deployed version ${{ env.APP_VERSION }} to Raspberry Pi"
